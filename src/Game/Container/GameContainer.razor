@using Blazored.LocalStorage
@using Melinoe.Game
@using Melinoe.Game.Classic
@using Melinoe.Game.Table
@inherits GameComponent

<PageTitle>
    In Game @Subscription.GameCode 👻
</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pt-3 pb-6">
    <div class="d-flex flew-row justify-center align-end mt-1 mb-4" style="gap: 12px;">
        <div class="d-flex flex-row justify-center align-center">
            <MudText Align="Align.Center" Typo="Typo.h5">
                Code: @Subscription.GameCode
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" OnClick="CopyLinkToClipboardAsync" Class="ml-1 pa-2" />
        </div>
            @if (ViewType == GameViewType.Table)
            {
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary" 
                           OnClick="() => UpdateViewTypeAsync(GameViewType.Classic)">
                    Table View
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" 
                            Color="Color.Primary" 
                            OnClick="() => UpdateViewTypeAsync(GameViewType.Table)">
                    Classic View
                </MudButton>
            }

            @if (Subscription.Game.Type == GameType.Nightmare)
            {
                <MudButton Variant="Variant.Outlined" 
                            Color="Color.Warning" 
                            OnClick="() => Subscription.Game.UpdateTypeAsync(GameType.Normal)">
                    Nightmare
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" 
                            Color="Color.Primary" 
                            OnClick="() => Subscription.Game.UpdateTypeAsync(GameType.Nightmare)">
                    Normal Mode
                </MudButton>
            }

        <MudDivider Vertical="true" FlexItem="true" Class="mt-1" Light="true" />

        <MudButton OnClick="Game.ResetGameAsync"
                   Variant="Variant.Outlined"
                   Color="Color.Error"
                   EndIcon="@Icons.Filled.RestartAlt">
            Reset
        </MudButton>
        <MudButton OnClick="Leave"
                   Variant="Variant.Outlined"
                   Color="Color.Error"
                   EndIcon="@Icons.Filled.ExitToApp">
            Leave
        </MudButton>
    </div>

    @if (ViewType == GameViewType.Table)
    {
        <GameTable Subscription="Subscription" />
    }
    else if (ViewType == GameViewType.Classic)
    {
        <ClassicGameView Subscription="Subscription" />
    }
</MudContainer>

@code {
    [Inject]
    private IJSRuntime JsRuntime { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ILocalStorageService LocalStorage { get; set; } = default!;

    [Parameter, EditorRequired]
    public Action Leave { get; set; } = () => { };

    private enum GameViewType { Table, Classic }
    private GameViewType ViewType { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        ViewType = await LocalStorage.GetItemAsync<GameViewType>("GameView");
        StateHasChanged();
    }

    private async Task UpdateViewTypeAsync(GameViewType newViewType)
    {
        ViewType = newViewType;
        await LocalStorage.SetItemAsync<GameViewType>("GameView", newViewType);
    }

    private string PageLink => NavigationManager.ToAbsoluteUri($"/{Subscription?.GameCode}").ToString();

    private async Task CopyLinkToClipboardAsync() =>
        await JsRuntime.InvokeVoidAsync("clipboardInterop.copy", PageLink);
}
