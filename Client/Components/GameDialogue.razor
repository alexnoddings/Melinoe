@using Melinoe.Shared.Evidence
@using Melinoe.Shared.Ghosts
@using Melinoe.Shared.Objectives
@using Melinoe.Shared.Possibilities
@using Icon = Blazorise.Icons.FontAwesome.Icon
@inherits FluxorComponent

<Container Fluid="true" Class="game">
    <Row Margin="Margin.Is2.OnY">
        <Column ColumnSize="ColumnSize.Is3.OnDesktop.IsFull.OnMobile">

        </Column>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop.IsFull.OnMobile">
            <Heading Size="HeadingSize.Is1" Alignment="TextAlignment.Center">
                @Game.Code
            </Heading>
        </Column>
        <Column ColumnSize="ColumnSize.Is3.OnDesktop.IsFull.OnMobile" Display="Display.Flex.ReverseRow.OnDesktop.Flex.Column.OnMobile">
            <Button Color="Color.Danger" Clicked="ResetGame" Margin="Margin.IsAuto.OnX.OnMobile">Reset</Button>
        </Column>
    </Row>
    <Row Margin="Margin.Is2.OnY">
        <Column>
            <Paragraph Alignment="TextAlignment.Center">
                Connected Players: @string.Join(", ", Game.Players)
            </Paragraph>
        </Column>
    </Row>
    <Row Margin="Margin.Is2.OnY" Display="Display.Flex">
        <Column ColumnSize="ColumnSize.IsAuto" Margin="Margin.IsAuto.OnX" Display="Display.Flex.Row">
            <Dropdown Margin="Margin.Is2.OnX">
                <DropdownToggle Color="Color.Primary">@(Game.FirstName?.ToString() ?? "First Name")</DropdownToggle>
                <DropdownMenu Class="name-select">
                    @foreach (GhostFirstName firstName in Enum.GetValues<GhostFirstName>())
                    {
                        <DropdownItem Active="@(Game.FirstName == firstName)" Clicked="() => UpdateFirstName(firstName)">@firstName</DropdownItem>
                    }
                </DropdownMenu>
            </Dropdown>
            <Dropdown Margin="Margin.Is1.OnX">
                <DropdownToggle Color="Color.Primary">@(Game.LastName?.ToString() ?? "Last Name")</DropdownToggle>
                <DropdownMenu>
                    @foreach (GhostLastName lastName in Enum.GetValues<GhostLastName>())
                    {
                        <DropdownItem Active="@(Game.LastName == lastName)" Clicked="() => UpdateLastName(lastName)">@lastName</DropdownItem>
                    }
                </DropdownMenu>
            </Dropdown>
        </Column>
    </Row>
    <Row Margin="Margin.Is2.OnY.IsAuto.OnX" Class="justify-content-center">
        @foreach (Objective objective in Enum.GetValues<Objective>())
        {
            bool isEnabled = Game.Objectives.HasFlag(objective);
            <Column Margin="Margin.Is1" Padding="Padding.Is0" ColumnSize="ColumnSize.IsAuto.OnDesktop.Is3.OnMobile">
                <Button Block="true" Color="(isEnabled ? Color.Primary : Color.Secondary)" Clicked="() => UpdateObjective(objective, !isEnabled)">
                    <Icon Name="@(isEnabled ? "fa-clipboard-list" : "fa-clipboard-check")" Margin="Margin.Is1.FromRight" />
                    @objective
                </Button>
            </Column>
        }
    </Row>
    <Row Margin="Margin.Is2.OnY" Padding="Padding.Is3.OnX">
        <Table Margin="Margin.IsAuto.OnX.Is0.FromBottom" Borderless="true" Narrow="true" Responsive="true" Style="max-width: 1000px;">
            <TableHeader>
                <TableRow>
                    <TableHeaderCell></TableHeaderCell>
                    @foreach (EvidencePossibility evidence in Game.EvidencePossibilities)
                    {
                        // Overridden if the possibility is forced (i.e. the evidence is definite but wasn't set, or is not possible but wasn't set)
                        bool isOverridden =
                        (evidence.Possibility == Possibility.NotPossible && evidence.OriginalState != EvidenceState.NotPresent)
                        || (evidence.Possibility == Possibility.Definite && evidence.OriginalState != EvidenceState.Present);

                        TextColor textColor = GetHeaderTextColor(evidence.Possibility);
                        TextColor iconColor = isOverridden ? TextColor.Muted : textColor;

                        <TableHeaderCell>
                            <Column Display="Display.Flex.Column">
                                <Text Alignment="TextAlignment.Center" Color="textColor">@evidence.Type</Text>
                                <Field Display="Display.Flex.Row" JustifyContent="JustifyContent.Center" Margin="Margin.Is0">
                                    <Button Size="Size.ExtraSmall" Disabled="@isOverridden" Outline="false" Clicked="() => UpdateEvidence(evidence.Type, EvidenceState.NotPresent)">
                                        <Text Color="iconColor">
                                            <Icon Name="IconName.Times" />
                                        </Text>
                                    </Button>
                                    <Button Size="Size.ExtraSmall" Disabled="@isOverridden" Outline="false" Clicked="() => UpdateEvidence(evidence.Type, EvidenceState.Unsure)">
                                        <Text Color="iconColor">
                                            <Icon Name="@("fa-question")" />
                                        </Text>
                                    </Button>
                                    <Button Size="Size.ExtraSmall" Disabled="@isOverridden" Outline="false" Clicked="() => UpdateEvidence(evidence.Type, EvidenceState.Present)">
                                        <Text Color="iconColor">
                                            <Icon Name="IconName.Check" />
                                        </Text>
                                    </Button>
                                </Field>
                            </Column>
                        </TableHeaderCell>
                    }
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (GhostPossibility ghostPossibility in Game.GhostPossibilities)
                {
                    Possibility possibility = ghostPossibility.Possibility;
                    <TableRow Background="@(possibility == Possibility.Definite ? Background.Success : Background.Transparent)" TextColor="GetBodyTextColor(possibility)">
                        <TableRowHeader>
                            @ghostPossibility.Ghost.Name
                        </TableRowHeader>
                        @foreach (EvidencePossibility evidence in Game.EvidencePossibilities)
                        {
                            if ((ghostPossibility.Ghost.RequiredEvidence & evidence.Type) == evidence.Type)
                            {
                                <TableRowCell TextAlignment="TextAlignment.Center">
                                    <Icon Name="@("fa-bullseye")" />
                                </TableRowCell>
                            }
                            else
                            {
                                <TableRowCell>
                                </TableRowCell>
                            }
                        }
                    </TableRow>
                }
            </TableBody>
        </Table>
    </Row>
</Container>
